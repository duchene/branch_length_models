


schemes <- c("rvar", "trln", "rvartrln")

seqlens <- c(1000, 2000, 4000, 8000)
taxa <- c(32, 16, 8, 4)

pdf("summary_sims_supportpie.pdf", height = 16, width = 48, useDingbats = F)
par(mfrow = c(4, 12))

for(i in 1:4){
	## Plot sequence lengths as rows and number of taxa al columns.
	for(k in 1:3){
		for(j in 1:4){
			load(paste0(schemes[k], "/sqln", seqlens[j], "tx", taxa[i], "/res.Rdata"))
			restab <- table(modelsup)
			if(!"1" %in% names(restab)) restab["1"] <- 0
			if(!"2" %in% names(restab)) restab["2"] <- 0
			if(!"3" %in% names(restab)) restab["3"] <- 0
			restab <- restab[c("1", "2", "3")]
			names(restab) <- c("Shared", "PropLink", "Unlinked")
			pie(restab, col = c("yellow", "orange", "red"), labels = c("", "", ""), radius = 1, main = paste(schemes[k], seqlens[j], taxa[i]))
		}
	}
}

dev.off()

# Tree length differences from simulation

ggparcor <- list()
for(i in 1:4){
	for(k in 1:3){
		for(j in 1:4){
			load(paste0(schemes[k], "/sqln", seqlens[j], "tx", taxa[i], "/res.Rdata"))
			ggstatmat <- matrix(NA, ncol(trlendif)*nrow(trlendif), 3)
			ggstatmat <- as.data.frame(ggstatmat)
			ggstatmat[,1] <- rep(1:ncol(trlendif), each = nrow(trlendif))
			ggstatmat[,2] <- rownames(trlendif)
			ggstatmat[,3] <- as.numeric(trlendif)
			colnames(ggstatmat) <- c("dataset", "model", "trlendif")
			ggparcor[[length(ggparcor) + 1]] <- ggplot(ggstatmat) + geom_line(aes(x = model, y = trlendif, group = dataset, color = dataset)) + scale_y_continuous(breaks = round_any(seq(min(ggstatmat$trlendif), max(ggstatmat$trlendif), length.out = 3), 100)) + theme_bw()
		}
	}
}
ggsave("summary_sims_trlendif_gg.pdf", plot = do.call("grid.arrange", c(ggparcor, nrow = 4)), device = "pdf", width = 60, height = 16, limitsize = F)

# Tree length difference from simulation ranks

ggparcor <- list()
for(i in 1:4){
	for(k in 1:3){
		for(j in 1:4){
			load(paste0(schemes[k], "/sqln", seqlens[j], "tx", taxa[i], "/res.Rdata"))
			trlendifrank <- apply(trlendif, 2, rank, ties.method = "first")
			ggstatmat <- matrix(NA, ncol(trlendifrank)*nrow(trlendifrank), 3)
			ggstatmat <- as.data.frame(ggstatmat)
			ggstatmat[,1] <- rep(1:ncol(trlendifrank), each = nrow(trlendifrank))
			ggstatmat[,2] <- rownames(trlendifrank)
			ggstatmat[,3] <- as.numeric(trlendifrank)
			colnames(ggstatmat) <- c("dataset", "model", "trlendifrank")
			ggparcor[[length(ggparcor) + 1]] <- ggplot(ggstatmat) + geom_line(aes(x = model, y = trlendifrank, group = dataset, color = dataset)) + scale_y_continuous(breaks = round_any(seq(min(ggstatmat$trlendifrank), max(ggstatmat$trlendifrank), length.out = 3), 100)) + theme_bw()
		}
	}
}
ggsave("summary_sims_trlenrank_gg.pdf", plot = do.call("grid.arrange", c(ggparcor, nrow = 4)), device = "pdf", width = 60, height = 16, limitsize = F)

# Tree length difference from simulation absolute rank

ggparcor <- list()
for(i in 1:4){
	for(k in 1:3){
		for(j in 1:4){
			load(paste0(schemes[k], "/sqln", seqlens[j], "tx", taxa[i], "/res.Rdata"))
			trlendifabsrank <- apply(abs(trlendif), 2, rank, ties.method = "first")
			ggstatmat <- matrix(NA, ncol(trlendifabsrank)*nrow(trlendifabsrank), 3)
			ggstatmat <- as.data.frame(ggstatmat)
			ggstatmat[,1] <- rep(1:ncol(trlendifabsrank), each = nrow(trlendifabsrank))
			ggstatmat[,2] <- rownames(trlendifabsrank)
			ggstatmat[,3] <- as.numeric(trlendifabsrank)
			colnames(ggstatmat) <- c("dataset", "model", "trlendifabsrank")
			ggparcor[[length(ggparcor) + 1]] <- ggplot(ggstatmat) + geom_line(aes(x = model, y = trlendifabsrank, group = dataset, color = dataset)) + scale_y_continuous(breaks = round_any(seq(min(ggstatmat$trlendifabsrank), max(ggstatmat$trlendifabsrank), length.out = 3), 100)) + theme_bw()
		}
	}
}
ggsave("summary_sims_trlenabsrank_gg.pdf", plot = do.call("grid.arrange", c(ggparcor, nrow = 4)), device = "pdf", width = 60, height = 16, limitsize = F)

# Stemminess differences from simulation

ggparcor <- list()
for(i in 1:4){
	for(k in 1:3){
		for(j in 1:4){
			load(paste0(schemes[k], "/sqln", seqlens[j], "tx", taxa[i], "/res.Rdata"))
			ggstatmat <- matrix(NA, ncol(trstemdif)*nrow(trstemdif), 3)
			ggstatmat <- as.data.frame(ggstatmat)
			ggstatmat[,1] <- rep(1:ncol(trstemdif), each = nrow(trstemdif))
			ggstatmat[,2] <- rownames(trstemdif)
			ggstatmat[,3] <- as.numeric(trstemdif)
			colnames(ggstatmat) <- c("dataset", "model", "trstemdif")
			ggparcor[[length(ggparcor) + 1]] <- ggplot(ggstatmat) + geom_line(aes(x = model, y = trstemdif, group = dataset, color = dataset)) + scale_y_continuous(breaks = round_any(seq(min(ggstatmat$trstemdif), max(ggstatmat$trstemdif), length.out = 3), 100)) + theme_bw()
		}
	}
}
ggsave("summary_sims_trstemdif_gg.pdf", plot = do.call("grid.arrange", c(ggparcor, nrow = 4)), device = "pdf", width = 60, height = 16, limitsize = F)

# Stemminess difference from simulation rank

ggparcor <- list()
for(i in 1:4){
	for(k in 1:3){
		for(j in 1:4){
			load(paste0(schemes[k], "/sqln", seqlens[j], "tx", taxa[i], "/res.Rdata"))
			trstemdifrank <- apply(trstemdif, 2, rank, ties.method = "first")
			ggstatmat <- matrix(NA, ncol(trstemdifrank)*nrow(trstemdifrank), 3)
			ggstatmat <- as.data.frame(ggstatmat)
			ggstatmat[,1] <- rep(1:ncol(trstemdifrank), each = nrow(trstemdifrank))
			ggstatmat[,2] <- rownames(trstemdifrank)
			ggstatmat[,3] <- as.numeric(trstemdifrank)
			colnames(ggstatmat) <- c("dataset", "model", "trstemdifrank")
			ggparcor[[length(ggparcor) + 1]] <- ggplot(ggstatmat) + geom_line(aes(x = model, y = trstemdifrank, group = dataset, color = dataset)) + scale_y_continuous(breaks = round_any(seq(min(ggstatmat$trstemdifrank), max(ggstatmat$trstemdifrank), length.out = 3), 100)) + theme_bw()
		}
	}
}
ggsave("summary_sims_trstemrank_gg.pdf", plot = do.call("grid.arrange", c(ggparcor, nrow = 4)), device = "pdf", width = 60, height = 16, limitsize = F)

# Stemminess difference from simulation absolute rank

ggparcor <- list()
for(i in 1:4){
	for(k in 1:3){
		for(j in 1:4){
			load(paste0(schemes[k], "/sqln", seqlens[j], "tx", taxa[i], "/res.Rdata"))
			trstemdifabsrank <- apply(abs(trstemdif), 2, rank, ties.method = "first")
			ggstatmat <- matrix(NA, ncol(trstemdifabsrank)*nrow(trstemdifabsrank), 3)
			ggstatmat <- as.data.frame(ggstatmat)
			ggstatmat[,1] <- rep(1:ncol(trstemdifabsrank), each = nrow(trstemdifabsrank))
			ggstatmat[,2] <- rownames(trstemdifabsrank)
			ggstatmat[,3] <- as.numeric(trstemdifabsrank)
			colnames(ggstatmat) <- c("dataset", "model", "trstemdifabsrank")
			ggparcor[[length(ggparcor) + 1]] <- ggplot(ggstatmat) + geom_line(aes(x = model, y = trstemdifabsrank, group = dataset, color = dataset)) + scale_y_continuous(breaks = round_any(seq(min(ggstatmat$trstemdifabsrank), max(ggstatmat$trstemdifabsrank), length.out = 3), 100)) + theme_bw()
		}
	}
}
ggsave("summary_sims_trstemabsrank_gg.pdf", plot = do.call("grid.arrange", c(ggparcor, nrow = 4)), device = "pdf", width = 60, height = 16, limitsize = F)

# Tree topology distance from simulation

ggparcor <- list()
for(i in 1:4){
	for(k in 1:3){
		for(j in 1:4){
			load(paste0(schemes[k], "/sqln", seqlens[j], "tx", taxa[i], "/res.Rdata"))
			ggstatmat <- matrix(NA, ncol(trdist)*nrow(trdist), 3)
			ggstatmat <- as.data.frame(ggstatmat)
			ggstatmat[,1] <- rep(1:ncol(trdist), each = nrow(trdist))
			ggstatmat[,2] <- rownames(trdist)
			ggstatmat[,3] <- as.numeric(trdist)
			colnames(ggstatmat) <- c("dataset", "model", "trdist")
			ggparcor[[length(ggparcor) + 1]] <- ggplot(ggstatmat) + geom_line(aes(x = model, y = trdist, group = dataset, color = dataset)) + scale_y_continuous(breaks = round_any(seq(min(ggstatmat$trdist), max(ggstatmat$trdist), length.out = 3), 100)) + theme_bw()
		}
	}
}
ggsave("summary_sims_trdist_gg.pdf", plot = do.call("grid.arrange", c(ggparcor, nrow = 4)), device = "pdf", width = 60, height = 16, limitsize = F)